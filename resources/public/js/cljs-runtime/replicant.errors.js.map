{"version":3,"sources":["replicant/errors.cljc"],"mappings":";AAIA,2CAAA,3CAAMA;AAAN,AAAA","names":["replicant.errors/catch-exceptions?"],"sourcesContent":["(ns ^:no-doc replicant.errors\n  #?(:clj (:require [replicant.env :as env]))\n  #?(:cljs (:require-macros [replicant.errors])))\n\n(defn catch-exceptions? []\n  #?(:clj (env/enabled? :replicant/catch-exceptions? (not (env/dev?)))))\n\n(defmacro log [message ctx error]\n  (if (:ns &env)\n    `(do\n       (js/console.log ~message)\n       (when-let [ctx# ~ctx]\n         (run! (fn [[k# v#]]\n                 (js/console.log\n                  (pr-str k#)\n                  (if (or (coll? v#) (keyword? v#))\n                    (pr-str v#)\n                    v#)))\n               ctx#))\n       (js/console.error ~error))\n    `(do\n       (println ~message)\n       (when-let [ctx# ~ctx]\n         (prn ctx#))\n       (prn ~error))))\n\n(defmacro ^{:indent 2} with-error-handling [message ctx body & [catch-clause]]\n  (if (catch-exceptions?)\n    (let [e `e#]\n      `(try\n         ~body\n         (catch ~(if (:ns &env)\n                   :default\n                   'Exception) ~e\n           (log (str \"Threw exception while \" ~message) ~ctx ~e)\n           ~(let [[binding & exprs] (drop 2 catch-clause)]\n              (when binding\n                `(let [~binding ~e]\n                   ~@exprs))))))\n    body))\n"],"x_google_ignoreList":[0]}
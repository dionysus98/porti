{"version":3,"sources":["porti/core.cljs"],"mappings":"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","names":["p__44247","map__44248","cljs.core/--destructure-map","cljs.core.get","js/Error","porti.core/>bubble","bubble","position","fexpr__44249","map__44250","->mouseover","mouseover?","G__44251","cljs.core._EQ_","cljs.core.assoc","porti.core/>header-title","_state","porti.core/>header","state","porti.core/>summary","github-profile","porti.core/>app","p__44252","vec__44253","seq__44254","cljs.core/seq","first__44255","cljs.core/first","cljs.core/next","porti.core/process-effect","!state","effect","args","cljs.core/deref","cljs.pprint.pprint","G__44256","cljs.core/Keyword","cljs.core.apply","cljs.core/swap!","cljs.core/assoc-in","porti.core/execute-actions","event-data","cljs.core.mapcat","p__44257","vec__44258","seq__44259","first__44260","action-id","action-args","_action","G__44261","cljs.core.into","vec__44262","cljs.core.nth","event-type","G__44265","porti.core/interpolate","event","data","clojure.walk/postwalk","x","G__44266","G__44267","G__44268","cljs.core.keyword","G__44269","G__44270","cljs.core/clj->js","p__44272","map__44273","porti.core/dispatcher!","dom-event","p1__44271#","cljs.core/run!","porti.core/init!","_","new-state","replicant.dom/render","js/document.body","cljs.core/add-watch","replicant.dom/set-dispatch!","cljs.core.partial","cljs.core.swap_BANG_","cljs.core/assoc","js/Date"],"sourcesContent":["(ns porti.core\n  (:require\n   [cljs.pprint :as pprint]\n   [clojure.walk :as walk]\n   [replicant.dom :as r]))\n\n(defn >bubble [{bubble :ui.header/bubble} position]\n  {:pre [(#{:left :right} position)]}\n  (let [->mouseover\n        (fn [mouseover?]\n          [:action/assoc-in [:ui.header/bubble position :mouseover?] mouseover?])\n        {:keys [mouseover?]} (get bubble position)]\n    [:div\n     {:replicant/on-mount [(->mouseover false)]\n      :on\n      {:mouseover  [(->mouseover true)]\n       :mouseleave [(->mouseover false)]}\n      :style\n      (cond-> {:position      \"fixed\"\n               :margin        \"0\"\n               :padding       \"0\"\n               :top           \"-2rem\"\n               :background    \"#fff\"\n               :color         \"#000\"\n               :width         \"6rem\"\n               :height        \"6rem\"\n               :border-radius \"50%\"\n               :transition    \"transform 0.25s ease\"\n               :cursor        \"pointer\"}\n        (= position :left) (assoc :left \"-2rem\")\n        (= position :right) (assoc :right \"-2rem\")\n        mouseover? (assoc :transform  \"scale(1.175)\"\n                          :background \"#dd119988\"\n                          :border     \"1.2rem solid #fff\"))}]))\n\n(defn >header-title [_state]\n  [:h4 {:style {:margin      \"1rem 0 0 0\"\n                :padding     \"0\"\n                :font-family \"Fira Code\"}}\n   \"<==| <(*)> |==>\"])\n\n(defn >header [state]\n  [:nav\n   {:style\n    {:margin-bottom \"3.9rem\"\n     :display \"flex\"\n     :justify-content \"center\"\n     :align-items \"center\"}}\n   (>header-title state)\n   (>bubble state :left)\n   (>bubble state :right)])\n\n(defn >summary [_state]\n  [:section\n   [:h1 {:style {:font-family \"Dancing Script\"\n                 :text-align  \"center\"}}\n    \"Avinash Sridhar\"]\n   [:article\n    [:ul\n     [:li (let [github-profile \"https://github.com/dionysus98\"]\n            [:article\n             [:header \"Toys\"]\n             [:ol\n              [:li\n               [:a {:href   (str github-profile \"/reflector-clj\")\n                    :target \"_blank\"}\n                \"A basic neural net library\"]\n               [:p (str \"A very simple neural net library written in clojure from scratch \"\n                        \"to understand the logic behind neural networks, \"\n                        \"machine learning and model building in general. \"\n                        \"A example model is created at the core to demonstrate the neural net capabilities.\")]]\n              [:li [:a\n                    {:href (str github-profile \"/clox\")\n                     :target \"_blank\"}\n                    \"An interpreted programming language [lox]\"]]\n              [:li [:a\n                    {:href (str github-profile \"/pngme\")\n                     :target \"_blank\"}\n                    \"PNG hidden messages encoder/decoder\"]]]])]\n     [:li [:article\n           [:header \"Contacts\"]\n           [:table\n            [:tr\n             [:th \"Email\"]\n             [:td \"avysridhar@gmail.com\"]]\n            [:tr\n             [:th \"Github\"]\n             [:td \"dionysus98\"]]]]]]]])\n\n(defn >app [state]\n  [:div#root.container-fluid\n   (>header state)\n   [:main\n    (>summary state)]])\n\n(defn process-effect [!state [effect & args]]\n  (when (:app/debug? @!state)\n    (pprint/pprint {\"Effect\" {effect args}}))\n  (case effect\n    :effect/assoc-in\n    (apply swap! !state assoc-in args)))\n\n(defn execute-actions [!state event-data]\n  (mapcat\n   (fn [[action-id & action-args :as _action]]\n     (when (:app/debug? @!state)\n       (pprint/pprint {\"Action\" {action-id action-args}}))\n     (case action-id\n       :action/assoc-in\n       [(into [:effect/assoc-in] action-args)]\n\n       :ui.header/bubble\n       (let [[event-type position] action-args]\n         (case event-type\n           :mouseover [[:effect/assoc-in [action-id position :mouseover?] true]]\n           :mouseleave [[:effect/assoc-in [action-id position :mouseover?] false]]))\n       (when (:app/debug? @!state)\n         (pprint/pprint {\"Unknown Action\" {action-id action-args}}))))\n   event-data))\n\n(defn interpolate [event data]\n  (walk/postwalk\n   (fn [x]\n     (case x\n       :event.target/value-as-number\n       (some-> event .-target .-valueAsNumber)\n\n       :event.target/value-as-keyword\n       (some-> event .-target .-value keyword)\n\n       :event.target/value\n       (some-> event .-target .-value)\n\n       :event.target/as-map\n       (some-> event .-target clj->js)\n\n       x))\n   data))\n\n(defn dispatcher!\n  [!state {:replicant/keys [dom-event]} event-data]\n  (->> (interpolate dom-event event-data)\n       (execute-actions !state)\n       (run! #(process-effect !state %))))\n\n(defn init! [!state]\n  (->> (fn init-app! [_ _ _ new-state]\n         (r/render\n          js/document.body\n          (>app new-state)))\n       (add-watch !state ::render))\n  (r/set-dispatch! (partial dispatcher! !state))\n  (swap! !state assoc ::loaded-at (-> (js/Date.) .getTime)))\n\n(comment\n  (require '[replicant.string :as rstr])\n\n  (some-> js/document\n          (.querySelector \".container-fluid\")\n          (.insertAdjacentHTML \"beforeend\"\n                               (replicant.string/render [:div \"FKU\"])))\n\n  :rcf)"]}
{"version":3,"sources":["replicant/string.cljc"],"mappings":"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","names":["replicant$string$IStringifier$append$dyn","x__5373__auto__","m__5374__auto__","replicant.string/append","goog/typeOf","m__5372__auto__","cljs.core/missing-protocol","replicant$string$IStringifier$to_string$dyn","replicant.string/to-string","replicant.string/IStringifier","this","s","replicant.string/create-renderer","sb","replicant.string/t_replicant$string37936","_","replicant.string/self-closing?","replicant.string/str-join","stringifier","sep","xs","G__37939","cljs.core/first","seq__37940","cljs.core/seq","chunk__37941","count__37942","i__37943","temp__5823__auto__","cljs.core/chunked-seq?","c__5548__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","x","cljs.core/rest","replicant.string/render-attrs","attrs","cljs.core/reduce-kv","k","v","and__5023__auto__","cljs.core/not","fexpr__37944","cljs.core/namespace","G__37945","cljs.core/Keyword","cljs.core/name","G__37946","cljs.core.keep","p__37947","vec__37948","cljs.core.nth","prop","val","replicant.core/get-style-val","G__37951","replicant.string/escape-html","text","clojure.string/replace","replicant.string/get-expanded-headers","opt","headers","cljs.core/qualified-keyword?","cljs.core.get","cljs.core.ex_info","or__5025__auto__","aliased","replicant.core/get-alias-headers","p__37952","map__37953","cljs.core/--destructure-map","replicant.string/render-node","depth","indent","aliases","alias-data","indent?","indent-s","clojure.string.join","cljs.core.repeat","newline","temp__5821__auto__","G__37954","tag-name","replicant.core/get-attrs","ns-string","cljs.core._EQ_","G__37955","G__37956","cljs.core/run!","child","G__37957","G__37958","G__37959","replicant.core/get-children","G__37960","var_args","args__5755__auto__","len__5749__auto__","i__5750__auto__","argseq__5756__auto__","cljs.core/IndexedSeq","replicant.string/render","p__37963","vec__37964","map__37967","seq37961","G__37962","self__5734__auto__","hiccup","replicant.alias/get-registered-aliases","replicant.hiccup/hiccup?","replicant.core/get-hiccup-headers","cljs.core/list?","seq__37968","chunk__37969","count__37970","i__37971","hiccup-node"],"sourcesContent":["(ns replicant.string\n  (:require [clojure.string :as str]\n            [replicant.alias :as alias]\n            [replicant.core :as r]\n            [replicant.hiccup :as h]\n            [replicant.hiccup-headers :as hiccup]))\n\n(defprotocol IStringifier\n  (append [this s])\n  (to-string [this]))\n\n(defn create-renderer []\n  #?(:clj\n     (let [sb (StringBuilder.)]\n       (reify IStringifier\n         (append [_ s]\n           (.append sb s))\n\n         (to-string [_]\n           (.toString sb))))\n\n     :cljs\n     (let [sb #js []]\n       (reify IStringifier\n         (append [_ s]\n           (.push sb s))\n\n         (to-string [_]\n           (.join sb \"\"))))))\n\n(def ^:no-doc self-closing?\n  #{\"area\" \"audio\" \"base\" \"br\" \"col\" \"embed\" \"hr\" \"img\"\n    \"input\" \"link\" \"meta\" \"param\" \"source\" \"track\" \"wbr\"})\n\n(defn str-join [stringifier sep xs]\n  (some->> (first xs) (append stringifier))\n  (doseq [x (rest xs)]\n    (when x\n      (append stringifier sep)\n      (append stringifier x)))\n  stringifier)\n\n(defn ^:no-doc render-attrs [stringifier attrs]\n  (reduce-kv\n   (fn [_ k v]\n     (when (and (not (#{:on :innerHTML} k))\n                v\n                (nil? (namespace k)))\n       (let [v (cond-> v\n                 (keyword? v)\n                 name)]\n         (append stringifier \" \")\n         (case k\n           :classes\n           (do\n             (append stringifier \"class=\\\"\")\n             (str-join stringifier \" \" v)\n             (append stringifier \"\\\"\"))\n\n           :style\n           (do\n             (append stringifier \"style=\\\"\")\n             (->> v\n                  (keep\n                   (fn [[prop val]]\n                     (when-let [val (r/get-style-val prop val)]\n                       (str (name prop) \": \" val \";\"))))\n                  (str-join stringifier \" \"))\n             (append stringifier \"\\\"\"))\n\n           (if (or (number? v)\n                   (and (string? v) (< 0 (count v))))\n             (doto stringifier\n               (append (name k))\n               (append \"=\\\"\")\n               (append v)\n               (append \"\\\"\"))\n             (append stringifier (name k))))))\n     nil)\n   nil\n   attrs))\n\n(defn escape-html\n  \"Change special characters into HTML character entities.\n\n  Taken from Hiccup:\n  https://github.com/weavejester/hiccup/blob/5a6d45c17728dcbcb3aeb32ea890fd9dc1508547/src/hiccup/util.clj#L80-L88\"\n  [text]\n  (-> text\n      (str/replace \"&\" \"&amp;\")\n      (str/replace \"<\" \"&lt;\")\n      (str/replace \">\" \"&gt;\")\n      (str/replace \"\\\"\" \"&quot;\")\n      (str/replace \"'\" \"&apos;\")))\n\n(defn ^:no-doc get-expanded-headers [opt headers]\n  (when (and (qualified-keyword? (hiccup/tag-name headers))\n             (nil? (get (:aliases opt) (hiccup/tag-name headers))))\n    (throw (ex-info (str \"Tried to expand undefined alias \" (hiccup/tag-name headers))\n                    {:missing (hiccup/tag-name headers)\n                     :available (:aliases opt)})))\n  (or (when-let [aliased (r/get-alias-headers opt headers)]\n        (get-expanded-headers opt aliased))\n      headers))\n\n(defn ^:no-doc render-node [stringifier headers {:keys [depth indent aliases alias-data]}]\n  (let [indent? (pos? indent)\n        indent-s (if indent? (str/join (repeat (* depth indent) \" \")) \"\")\n        newline (if indent? \"\\n\" \"\")\n        headers (get-expanded-headers {:aliases aliases\n                                       :alias-data alias-data} headers)]\n    (if-let [text (hiccup/text headers)]\n      (doto stringifier\n        (append indent-s)\n        (append (escape-html text))\n        (append newline))\n      (let [tag-name (hiccup/tag-name headers)\n            attrs (r/get-attrs headers)\n            ns-string (if (and (= \"svg\" tag-name)\n                               (not (:xmlns attrs)))\n                        \" xmlns=\\\"http://www.w3.org/2000/svg\\\"\"\n                        \"\")]\n        (doto stringifier\n          (append indent-s)\n          (append \"<\")\n          (append tag-name)\n          (append ns-string))\n        (render-attrs stringifier attrs)\n        (doto stringifier\n          (append \">\")\n          (append newline))\n        (if (:innerHTML attrs)\n          (append stringifier (:innerHTML attrs))\n          (run!\n           (fn [child]\n             (when child\n               (render-node\n                stringifier\n                child\n                {:depth (inc depth)\n                 :indent indent\n                 :aliases aliases\n                 :alias-data alias-data})))\n           (r/get-children headers (hiccup/html-ns headers))))\n        (when-not (self-closing? tag-name)\n          (doto stringifier\n            (append indent-s)\n            (append \"</\")\n            (append tag-name)\n            (append \">\")\n            (append newline)))\n        stringifier))))\n\n(defn render\n  \"Render `hiccup` to a string of HTML. `hiccup` can be either a single hiccup\n  node or a list of multiple nodes.\"\n  [hiccup & [{:keys [aliases alias-data indent]}]]\n  (let [opt {:indent (or indent 0)\n             :depth 0\n             :aliases (or aliases (alias/get-registered-aliases))\n             :alias-data alias-data}]\n    (cond\n      (h/hiccup? hiccup)\n      (let [stringifier (create-renderer)]\n        (render-node stringifier (r/get-hiccup-headers nil hiccup) opt)\n        (to-string stringifier))\n\n      (list? hiccup)\n      (let [stringifier (create-renderer)]\n        (doseq [hiccup-node hiccup]\n          (render-node stringifier (r/get-hiccup-headers nil hiccup-node) opt))\n        (to-string stringifier))\n\n      :else (str hiccup))))\n"],"x_google_ignoreList":[0]}